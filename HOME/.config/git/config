[user]
	name = Keith Devens
[include]
	# allow machine-specific configuration (eg. work vs home)
	path = ~/.config/machine_specific/.gitconfig
[push]
	default = current
[pull]
	rebase = merges
[rebase]
	autoStash = true
[status]
	showUntrackedFiles = all

[diff]
	tool = kdiff3
[merge]
	tool = kdiff3
[difftool]
	prompt = false
[mergetool]
	prompt = false

[difftool "sourcetree"]
	cmd = opendiff \"$LOCAL\" \"$REMOTE\"
	path =
[mergetool "sourcetree"]
	cmd = /Applications/Sourcetree.app/Contents/Resources/opendiff-w.sh \"$LOCAL\" \"$REMOTE\" -ancestor \"$BASE\" -merge \"$MERGED\"
	trustExitCode = true
[difftool "vscode"]
	cmd = code -nwd $LOCAL $REMOTE

# below settings for pager + colors suggested by diff-so-fancy
# https://github.com/so-fancy/diff-so-fancy
[core]
	pager = diff-so-fancy | less --tabs=4 -RFX
	editor = code -nw

[color "diff"]
	meta = yellow
	frag = magenta bold
	commit = yellow bold
	whitespace = red reverse

[alias]
	# list all aliases
	alias = !git config --get-regexp '^alias\\.' | perl -pe 's/[^.]+\\.([^=\\s]+).*$/$1/'
	a = add
	af = !git pick-status-files a
	aa = add -A
	au = add -u
	ap = add -p
	rp = reset -p # reset --patch is the opposite of add --patch
	b = branch
	br = branch -r
	current-branch = symbolic-ref --short HEAD
	current-tags = tag --list --points-at HEAD
	c = commit
	cm = commit -m
	ca = commit -a
	cam = commit -am
	cmp  = "!f() { git cm \"$@\" && git p; }; f"
	camp = "!f() { git cam \"$@\" && git p; }; f"
	co = checkout
	cof = !git pick-status-files co
	cf = !git cof
	cob = checkout -b
	clone-insecure = clone -c http.sslVerify=false
	d = diff
	dt = difftool
	df = !git pick-status-files d
	dtf = !git pick-status-files dt
	d1  = "!f() { git d  ${1:-@}^!; }; f"
	dt1 = "!f() { git dt ${1:-@}^!; }; f"
	ds = diff --staged
	dts = difftool --staged
	dst = dts
	email = config user.email
	exec = "!exec " # git aliases run from repo root, so can exec something from root
	edit = "!exec $EDITOR ."
	f = fetch
	hash = rev-parse
	hide = update-index --assume-unchanged
	unhide = update-index --no-assume-unchanged
	unhide-all = update-index --really-refresh
	ls = ls-files
	list-hidden = !git ls-files -v | grep '^[a-z]' | cut -c3-
	list-ignored = !git status -s --ignored | grep '^!!' | cut -c4-
	list-untracked = ls-files --others --exclude-standard
	lh = list-hidden
	li = list-ignored
	lu = list-untracked
	m = merge
	ma = merge --abort
	mc = merge --continue
	mf = merge --ff-only
	mn = merge --no-ff
	p = "!f() { if git upstream; then git push; else git push -u; fi }; f" # push, set upstream if necessary
	pf = push --force
	pl = pull
	pr = pull --rebase
	pick-commit = !git l1 | fzi --ansi | cut -d' ' -f2
	pc = pick-commit
	pick-status-files = !git status -z | xargs -0n1 | cut -c4- | fzi --print0 | xargs -0t git
	psf = pick-status-files
	sf = psf
	r = rebase --rebase-merges
	ra = rebase --abort
	rc = rebase --continue
	ri = r -i
	rif = !git pick-commit | xargs -tI% git ri %~
	s = status
	st = stash
	stm = stash push -m
	stl = stash list
	sts = stash show
	stp = stash show -p
	unstage = reset --
	uncommit = reset @~ --
	upstream = name-rev @{upstream}
	url = remote get-url origin
	info = remote show origin
	rao = remote add origin
	rso = remote set-url origin
	rro = remote rm origin
	repo-root = rev-parse --show-toplevel
	repo-parent = rev-parse --show-superproject-working-tree # for submodules
	patch = !git --no-pager diff --no-color
	set-upstream = !git branch --set-upstream-to=origin/$(git current-branch)
	l = log --date=format:'%a %Y-%m-%d %k:%M' --color=always --pretty=format:'%C(blue)%ad %C(cyan)%cn %C(auto)%h%d%n %s%n%w(0,4,4)%+b%C(reset)' --stat
	lg = "!f() { git log --color=always --graph --pretty=format:'%C(auto)%h %C(green)@%ar@%C(auto)%d %s %C(blue)<%an>%C(reset)' \"$@\" | perl -pe 's/@(\\d+)\\s+(\\w{2})[^@]+@/\"(\".sprintf(\"%02d\", $1).$2.\")\"/e' | less -RFX; }; f"
	l1 = log --date=short --color=always --pretty=format:'%C(green)%ad %C(auto)%h %C(blue)%<(20,trunc)%an %C(auto)%<(70,trunc)%s%d%C(reset)'
	lo = !git l ORIG_HEAD..
	lgo = !git lg ORIG_HEAD..
	l1o = !git l1 ORIG_HEAD..
	prune-merged = !git branch --merged | grep -Ev '^\\*' | grep -Evx '\\s*(master|develop)\\s*' | xargs -n1 git branch -d
	prune-remote = remote prune origin # prune branches deleted from remote
	most-edited = !git log --pretty=format: --name-only | sort | uniq -c | sort -rg | head -20
	authors = shortlog -sne
	# fl = "fix last", sl = "squash last"
	fl = commit --amend -C@
	sl = commit --amend -c@
	fixup  = "!f() { git commit --fixup  $1      && GIT_EDITOR=true          git ri --autosquash $1~; }; f"
	squash = "!f() { git commit --squash $1 -C$1 && GIT_SEQUENCE_EDITOR=true git ri --autosquash $1~; }; f"
