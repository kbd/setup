#!/usr/bin/env python3
import argparse
import logging

from aush import (
    cd,
    direnv,
    django_admin,
    echo,
    git,
    ln,
    mkdir,
    poetry,
    python3,
    t,
)

logging.basicConfig(level=logging.INFO)

# parse args
parser = argparse.ArgumentParser(description="Start a Python project")
parser.add_argument("name", help="The name of the project")
parser.add_argument("-d", "--django", action="store_true", help="Add Django to the project")
parser.add_argument("-p", "--poetry-config", default=[], action='append', nargs=2, help="Pass config arguments to Poetry")
parser.add_argument("-n", "--no-dependencies", action='store_true', help="Don't install any dependencies when creating project")
args = parser.parse_args()

# create directory
mkdir("-p", args.name)
cd(args.name)

# initialize poetry with default dependencies, create virtualenv
poetry.init(
    no_interaction = True,
    name = args.name,
    author = git.config(get='user.name'),
)

def add_source_to_pyproject(name, url):
    echo (f"""
[[tool.poetry.source]]
name = "{name}"
url = "{url}"
default = true""") >> 'pyproject.toml'

for (setting, value) in args.poetry_config:
    if setting == 'source':  # special-case source
        add_source_to_pyproject(*value.split('='))
        continue
    poetry.config['--local'](setting, value)

t('poetry.toml')  # ensure the poetry config exists to keep projects consistent

if not args.no_dependencies:
    poetry.add('pytest', 'ipython', 'ptpython', 'pylint', 'mypy', 'black', 'pudb', group="dev")

# set up direnv
echo("""export VIRTUAL_ENV=.venv
layout python""") >> '.envrc'
direnv.allow()

# create repo (if needed) and add/append to files
git.init()
echo(f"# {args.name}") >> 'README.md'
echo('\n'.join(('*.sqlite3', '*.db', '.venv/', '__pycache__/'))) >> '.gitignore'
git.add(all=True)
git.commit(m="Initial Python commit")

if args.django:
    # add django
    poetry.add("django", dev=["Werkzeug", "django-debug-toolbar", "django-extensions"])
    django_admin.startproject(args.name)
    cd(args.name)
    django_manage = python3["manage.py"]
    django_manage.startapp(f"{args.name}_app")
    django_manage.migrate()
    django_manage.createsuperuser(
        noinput = True,
        username = "admin",
        email = git.config(get='user.email') or 'admin@localhost',
        _env = dict(DJANGO_SUPERUSER_PASSWORD='admin'),
    )
    git.add(all=True)
    git.commit(m="Add Django")
else:
    # create project structure
    # .
    # ├── README.md
    # ├── bin
    # │   └── proj -> ../proj
    # ├── poetry.lock
    # ├── poetry.toml
    # ├── proj
    # │   └── __init__.py
    # ├── pyproject.toml
    # └── tests
    #     └── __init__.py
    files = [f'{args.name}/__init__.py', 'tests/__init__.py']
    t(*files, 'bin/')
    ln('-s', f'../{args.name}', f'bin/{args.name}')  # create package symlink
    files.append(f'bin/{args.name}')
    git.add(*files, force=True)
    git.commit(m="Create Python project structure")
