#!/usr/bin/env python3
import argparse
import logging
from os import chdir as cd

logging.basicConfig(level=logging.INFO)

from aush import direnv, django_admin, echo, git, ln, mkdir, poetry, python3, t

# parse args
parser = argparse.ArgumentParser(description="Start a Python project")
parser.add_argument("name", help="The name of the project")
parser.add_argument("-d", "--django", action="store_true", help="Add Django to the project")
args = parser.parse_args()

# create directory
mkdir("-p", args.name)
cd(args.name)

# initialize poetry with default dependencies, create virtualenv
poetry.init(
    no_interaction = True,
    name = args.name,
    author = git.config(get='user.name'),
    dev_dependency = [
        'pytest', 'ipython', 'ptpython', 'pylint', 'mypy', 'black', 'pudb'
    ],
)
poetry.install()

# set up direnv
echo("layout poetry") > '.envrc'
direnv.allow()

# add files to git
git.init()
echo("""*.sqlite3
*.db
.venv/
__pycache__/""") > '.gitignore'
git.add(all=True)
git.commit(m="Initial commit")

if args.django:
    # add django
    poetry.add("django", dev=["Werkzeug", "django-debug-toolbar", "django-extensions"])
    django_admin.startproject(args.name)
    cd(args.name)
    django_manage = python3["manage.py"]
    django_manage.startapp(args.name)
    django_manage.migrate()
    django_manage.createsuperuser(
        noinput = True,
        username = "admin",
        email = git.config(get='user.email'),
        _env = dict(DJANGO_SUPERUSER_PASSWORD='admin'),
    )
    git.add(all=True)
    git.commit(m="Add Django")
else:
    # create project structure
    #
    # source is under src/, tests and library code are at the same level
    # ./bin is top level; accesses library code via symlink which is git-ignored
    #
    # ├── bin
    # │   └── proj -> ../src/proj
    # ├── poetry.lock
    # ├── pyproject.toml
    # └── src
    #     ├── proj
    #     │   └── __init__.py
    #     └── tests
    #         └── __init__.py

    t(
        f'src/{args.name}/__init__.py',
        'src/tests/__init__.py',
        'bin/.gitignore',
    )

    echo(args.name) > 'bin/.gitignore'
    lib_symlink = f'bin/{args.name}'
    ln('-s', f'../src/{args.name}', lib_symlink)
    git.add(all=True)
    git.add('-f', lib_symlink)
    git.commit(m="Create project structure")
