#!/usr/bin/env python3

"""Show arguments provided in argv

Some examples of why this is handy:

Show how arguments are sent by the shell:
$ var="hello world"
$ ./argv $var
['./argv', 'hello', 'world']
$ ./argv "$var"
['./argv', 'hello world']

Show how subprocess.call sends arguments:
$ python3
...
>>> import subprocess
>>> subprocess.call(['./argv', 'hello world'])
['./argv', 'hello world']
0
>>> subprocess.call(['./argv', 'hello world'], shell=True)  # wrong
['./argv']
0
>>> subprocess.call('./argv hello world', shell=True)
['./argv', 'hello', 'world']
0

Show how 'python' and 'ipython' process arguments differently:
~$ python -i bin/argv -i
['bin/argv', '-i']
...
~$ ipython -i bin/argv -i
['.../bin/argv']
...


"""
import os
from sys import argv, exit, stderr, stdin, stdout


def myprint(*args, **kwargs):
    print(*args, **kwargs)
    if FILE:
        with open(FILE, "a") as f:
            print(*args, **{**kwargs, "file": f})

if __name__ == '__main__':
    # if ARGV_FILE set, also write output to that file
    if FILE := os.environ.get("ARGV_FILE"):
        FILE = os.path.expanduser(FILE)

    code = int(os.environ.get("ARGV_RETURN", 0))
    tty = int(os.environ.get("ARGV_TTY", 0))

    myprint(f"{os.getcwd()=}", file=stderr)

    if tty:
        myprint(f"{stdin.isatty()=}", file=stderr)
        myprint(f"{stdout.isatty()=}", file=stderr)
        myprint(f"{stderr.isatty()=}", file=stderr)

    if not stdin.isatty():  # if pipeline
        myprint(f"{stdin.read()=}", file=stderr)

    if vars := {
        k: v
        for k, v in os.environ.items()
        if k.lower().startswith("argv_")
    }:
        myprint("VARS:", vars, file=stderr)

    myprint(argv)
    exit(code)
