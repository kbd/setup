#!/usr/bin/env python3

"""Show arguments provided in argv

Some examples of why this is handy:

Show how arguments are sent by the shell:
$ var="hello world"
$ ./argv $var
['./argv', 'hello', 'world']
$ ./argv "$var"
['./argv', 'hello world']

Show how subprocess.call sends arguments:
$ python3
...
>>> import subprocess
>>> subprocess.call(['./argv', 'hello world'])
['./argv', 'hello world']
0
>>> subprocess.call(['./argv', 'hello world'], shell=True)  # wrong
['./argv']
0
>>> subprocess.call('./argv hello world', shell=True)
['./argv', 'hello', 'world']
0

Show how 'python' and 'ipython' process arguments differently:
~$ python -i bin/argv -i
['bin/argv', '-i']
...
~$ ipython -i bin/argv -i
['.../bin/argv']
...


"""
import os
from sys import argv, exit, stderr, stdin, stdout


class Env(dict):
    prefix = "ARGV_"
    def __init__(self):
        super().__init__({
            k[len(self.prefix):].lower(): v
            for k, v in os.environ.items()
            if k.upper().startswith(self.prefix)
        })

    def __getitem__(self, name):
        return self.get(name, 0)

    __getattr__ = __getitem__


def myprint(*args, **kwargs):
    print(*args, **{'file': stderr, **kwargs})
    if FILE:
        with open(FILE, "a") as f:
            print(*args, **{**kwargs, 'file': f})


if __name__ == '__main__':
    env = Env()

    # if ARGV_FILE set, also write output to that file
    if FILE := env.file:
        FILE = os.path.expanduser(FILE)

    myprint(f"{os.getcwd()=}")

    if not stdin.isatty():  # if pipeline
        myprint(f"{stdin.read()=}")

    if env.tty:
        myprint(f"{stdin.isatty()=}")
        myprint(f"{stdout.isatty()=}")
        myprint(f"{stderr.isatty()=}")

    if env:
        myprint("VARS:", env)

    if sleep := float(env.sleep):
        import time
        time.sleep(sleep)

    myprint(argv, file=stdout)
    exit(int(env['return']))
