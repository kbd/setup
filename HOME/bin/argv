#!/usr/bin/env python3

"""Show arguments provided in argv

Some examples of why this is handy:

Show how arguments are sent by the shell:
$ var="hello world"
$ ./argv $var
['./argv', 'hello', 'world']
$ ./argv "$var"
['./argv', 'hello world']

Show how subprocess.call sends arguments:
$ python3
...
>>> import subprocess
>>> subprocess.call(['./argv', 'hello world'])
['./argv', 'hello world']
0
>>> subprocess.call(['./argv', 'hello world'], shell=True)  # wrong
['./argv']
0
>>> subprocess.call('./argv hello world', shell=True)
['./argv', 'hello', 'world']
0

Show how 'python' and 'ipython' process arguments differently:
~$ python -i bin/argv -i
['bin/argv', '-i']
...
~$ ipython -i bin/argv -i
['.../bin/argv']
...


"""
import os
from sys import argv, stderr

if file := os.environ.get("ARGV_FILE"):
    file = os.path.expanduser(file)

def myprint(*args, **kwargs):
    print(*args, **kwargs)
    if file:
        with open(file, "a") as f:
            print(*args, **{**kwargs, "file": f})

vars = {
    k: v
    for k, v in os.environ.items()
    if k.lower().startswith("argv_")
}
myprint(f"CWD: {os.getcwd()}", file=stderr)
if vars:
    myprint(vars, file=stderr)
myprint(argv)
