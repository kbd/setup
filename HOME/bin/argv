#!/usr/bin/env python3

"""Show arguments provided in argv

Some examples of why this is handy:

Show how arguments are sent by the shell:
$ var="hello world"
$ ./argv $var
['./argv', 'hello', 'world']
$ ./argv "$var"
['./argv', 'hello world']

Show how subprocess.call sends arguments:
$ python3
...
>>> import subprocess
>>> subprocess.call(['./argv', 'hello world'])
['./argv', 'hello world']
0
>>> subprocess.call(['./argv', 'hello world'], shell=True)  # wrong
['./argv']
0
>>> subprocess.call('./argv hello world', shell=True)
['./argv', 'hello', 'world']
0

Show how 'python' and 'ipython' process arguments differently:
~$ python -i bin/argv -i
['bin/argv', '-i']
...
~$ ipython -i bin/argv -i
['.../bin/argv']
...


"""
import os
from sys import argv, exit, stderr, stdin, stdout


class Env:
    def __init__(self):
        for k, v in os.environ.items():
            if k.upper().startswith("ARGV_"):
                if
                setattr(self, k[5:].lower(), v)
                setattr(self, k, v)

    def __getitem__(self, name):
        return self.__dict__.get(name, 0)

    __getattr__ = __getitem__

    def __repr__(self):
        return repr(self.__dict__)

def myprint(*args, **kwargs):
    print(*args, **{'file': stderr} | kwargs)
    if FILE:
        with open(FILE, "a") as f:
            print(*args, **kwargs | {'file': f})

if __name__ == '__main__':
    env = Env()

    # if ARGV_FILE set, also write output to that file
    if FILE := env.file:
        FILE = os.path.expanduser(FILE)

    myprint(f"{os.getcwd()=}")

    if not stdin.isatty():  # if pipeline
        myprint(f"{stdin.read()=}")

        if int(os.environ.get("ARGV_TTY", 0)):
            myprint(f"{stdin.isatty()=}")
            myprint(f"{stdout.isatty()=}")
            myprint(f"{stderr.isatty()=}")


        myprint("VARS:", vars)

    if sleep := float(os.environ.get("ARGV_SLEEP", 0)):
        import time
        time.sleep(sleep)

    myprint(argv, file=stdout)
    exit(int(os.environ.get("ARGV_RETURN", 0)))
