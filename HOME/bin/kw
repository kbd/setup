#!/usr/bin/env python3
# kw = "kitty window"
# open a new kitty window with the provided command
import argparse
import functools
import glob
import json
import os
import subprocess
import sys
import tempfile
import threading
import time
from itertools import chain
from pathlib import Path

TAIL = 'gtail'  # gnu tail
LISTEN_ON = "/tmp/mykitty-*"  # must match 'listen_on' value in kitty.conf


run = functools.partial(subprocess.run, capture_output=True, check=True)


def find_window_pid(kitty_ls_windows, id):
    for os_window in kitty_ls_windows:
        for tab in os_window['tabs']:
            for window in tab['windows']:
                if window['id'] == id:
                    return window['pid']


def send_stdin_to_named_pipe(path):
    with open(path, 'w') as file:
        try:
            file.writelines(sys.stdin.readlines())
            file.flush()
        except BrokenPipeError:
            return


def kitty(to, rest):
    to = ('--to', f"unix:{to}") if to else ()  # to of None -> current kitty instance
    return run(['kitty', '@', *to, *rest])


def kitty_ls(to):
    return json.loads(kitty(to, ['ls']).stdout)


def kitty_ls_launch(to):
    """kitty_ls, launch kitty if needed"""
    try:
        return kitty_ls(to)
    except subprocess.CalledProcessError as e:
        if e.returncode == 1:
            start_kitty()  # assume old socket, try to start new kitty
            return kitty_ls(get_kitty_socket())
        else:
            raise


def wait_for_window_exit(to, window_id):
    ls = kitty_ls(to)
    pid = find_window_pid(ls, window_id)
    # https://stackoverflow.com/a/41613532
    subprocess.run([TAIL, '--pid', str(pid), '-f', '/dev/null'])


def get_kitty_socket(glb=LISTEN_ON):
    paths = [Path(f) for f in glob.glob(glb)]
    if not paths:
        return None
    return sorted(paths, key=lambda p: p.stat().st_mtime, reverse=True)[0]


def start_kitty():
    subprocess.Popen(["kitty"])
    time.sleep(1)  # ensure kitty has time to open


def get_kitty_socket_launch():
    """get_kitty_socket, launch new kitty if needed"""
    if to := get_kitty_socket():
        return to

    start_kitty()

    if to := get_kitty_socket():
        return to

    raise Exception("Couldn't get kitty socket")


def kitty_launch(subcmd, wait: bool, launch_args={}, dir=None):
    to = None
    if dir:
        dir = str(Path(dir))  # canonicalize the dir (removes trailing slash)
        to = get_kitty_socket_launch()
        ls = kitty_ls_launch(to)
        if window_id := find_free_window_at_dir(ls, dir):
            kitty(to, ['focus-window', '--match', f'id:{window_id}'])
            kitty(to, ['send-text', '--match', f'id:{window_id}', '--', *subcmd, '\n'])
        else:
            kitty(to, ['launch', '--type', 'tab', '--hold', '--cwd', dir, '--', *subcmd])
    else:
        args = chain.from_iterable((f'--{k}', v) for k, v in launch_args.items())
        cmd = ['launch', '--cwd', 'current', '--copy-env', *args, '--', *subcmd]
        result = kitty(to, cmd)
        if wait:
            window_id = int(result.stdout)

    if wait:
        wait_for_window_exit(to, window_id)


def find_free_window_at_dir(ls, dir):
    # find the first window set to dir that only has the login shell open
    for oswindow in ls:
        for tab in oswindow['tabs']:
            for window in tab['windows']:
                fg = window['foreground_processes']
                w = {k: window[k] for k in ['cmdline', 'cwd']}
                if len(fg) == 1:
                    f = {k: fg[0][k] for k in ['cmdline', 'cwd']}
                    if f['cwd'] == dir and w == f:
                        return window['id']


def get_additional_launch_args(args):
    kwargs = {}
    if args.vertical:
        kwargs['location'] = 'vsplit'
    elif args.horizontal:
        kwargs['location'] = 'hsplit'
    elif args.new:
        kwargs['type'] = 'os-window'
    elif args.tab:
        kwargs['type'] = 'tab'
    return kwargs


def main(args, rest):
    launch_args = get_additional_launch_args(args)
    if sys.stdin.isatty():
        kitty_launch([args.program, *rest], args.wait, launch_args, dir=args.dir)
    else:
        # if pipeline, pass stdin to subprocess via named pipe
        temp_dir = tempfile.mkdtemp()
        path = os.path.join(temp_dir, 'fifo')
        try:
            os.mkfifo(path)
            cmd = ['sh', '-c', f"cat {path} | {args.program} {' '.join(rest)}"]
            t1 = threading.Thread(target=kitty_launch, args=[cmd, args.wait, launch_args])
            t1.start()
            send_stdin_to_named_pipe(path)
            t1.join()
        finally:
            os.unlink(path)
            os.rmdir(temp_dir)

    if args.post:
        run(args.post, shell=True)


if __name__ == '__main__':
    parser = argparse.ArgumentParser(description="Open a kitty window with the provided command")
    parser.add_argument("program", help="Program to execute")
    parser.add_argument("-w", "--wait", action="store_true", help="Wait for completion of the subcommand before returning")
    parser.add_argument("-d", "--dir", help="Execute program in directory (tries to reuse existing window)")
    parser.add_argument("-p", "--post", help="Command to execute as a post step")

    group = parser.add_mutually_exclusive_group()
    group.add_argument("-H", "--horizontal", action="store_true", help="Split window horizontally")
    group.add_argument("-v", "--vertical", action="store_true", help="Split window vertically")
    group.add_argument("-n", "--new", action="store_true", help="Open into new kitty os window")
    group.add_argument("-t", "--tab", action="store_true", help="Open into new kitty tab")

    args, rest = parser.parse_known_args()

    if args.program == "GETSOCKET":
        print(get_kitty_socket())
    else:
        main(args, rest)
