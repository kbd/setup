#!/usr/bin/env -S uv run --script
# /// script
# requires-python = ">=3.13"
# dependencies = [
#     "python-dateutil",
# ]
# ///
# if given nothing, print the time
# if given the time, print the human time
# if given the human time, print the time

import argparse
import sys
from datetime import datetime

from dateutil import parser as dtp, tz


def isfloat(arg):
    """If only there was str.isfloat like str.isdigit"""
    try:
        float(arg)
        return True
    except ValueError:
        return False


def format_date(dt, fmt, strftime):
    if fmt in (None, 'unixtime'):
        return dt.timestamp()
    elif fmt == 'full_iso':
        return dt.isoformat()
    elif fmt == 'iso':
        return dt.strftime('%Y-%m-%d %H:%M:%S')
    elif fmt == 'date':
        return dt.strftime('%Y-%m-%d')
    elif fmt == 'time':
        return dt.strftime('%H:%M:%S')
    elif fmt == 'rfc2822':
        from email import utils
        return utils.format_datetime(dt)
    elif fmt == 'locale':
        return dt.strftime('%c')
    elif fmt == 'strftime':
        return dt.strftime(strftime)
    elif fmt == 'full':
        o = 'th' if 11 <= dt.day <= 13 else {1: 'st', 2: 'nd', 3: 'rd'}.get(dt.day % 10, 'th')
        return dt.strftime(f"%A, %B %-d{o} %Y")

    raise Exception(f"Unknown format option: {fmt}")


def main(arg, opts, utc):
    fmt = next((k for k, v in opts.items() if v), None)
    if not arg:
        dt = datetime.now(tz.tzutc() if utc else tz.tzlocal())
    elif isfloat(arg):
        dt = datetime.fromtimestamp(float(arg), tz.tzutc() if utc else tz.tzlocal())
        if not fmt:
            fmt = 'full_iso'
    else:
        dt = dtp.parse(arg)
        if dt.tzinfo is None:
            dt = dt.astimezone(tz.tzutc() if utc else tz.tzlocal())

    return format_date(dt, fmt, opts['strftime'])


if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='Show/convert timestamp')
    parser.add_argument('arg', nargs='*', help='Timestamp')
    parser.add_argument('-U', '--utc', action='store_true', help='use UTC')
    group = parser.add_mutually_exclusive_group()
    group.add_argument('-u', '--unixtime', action='store_true',
        help='unix timestamp (default if no arg or human arg)')
    group.add_argument('-i', '--iso', action='store_true', help='short iso')
    group.add_argument('-I', '--full_iso', action='store_true',
        help='full iso (default if timestamp arg)')
    group.add_argument('-r', '--rfc2822', action='store_true', help='rfc2822 (email)')
    group.add_argument('-l', '-c', '--locale', action='store_true', help='locale')
    group.add_argument('-s', '--strftime', metavar="S", help='Use strftime format string')
    group.add_argument('-f', '--full', action='store_true', help='Full English date')
    group.add_argument('-t', '--time', action='store_true', help='Time portion of iso date/time')
    group.add_argument('-d', '--date', action='store_true', help='Date portion of iso date/time')
    args = vars(parser.parse_args())

    # pick out primary arguments and pass format options
    arg = ' '.join(args.pop('arg'))
    utc = args.pop('utc')

    try:
        result = main(arg, args, utc)
        print(result)
    except Exception as e:
        print(repr(e))
        sys.exit(1)
