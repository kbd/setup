#!/usr/local/bin/python3
# ^ intentionally use system Python vs /usr/bin/env
import code
import functools
import logging
import os
import subprocess
import textwrap
from pathlib import Path

import click

from lib.utils import run_commands

log = logging.getLogger()

SETTINGS_PATH = 'conf/settings.py'
HOME_DIR = 'HOME'


@click.group(chain=True)
@click.option("-d", "--debug", is_flag=True, help="Enable debug logging")
def cli(debug):
    # set up logging
    loglevel = logging.DEBUG if debug else logging.INFO
    logging.basicConfig(level=loglevel)
    logging.getLogger('requests').setLevel(logging.WARNING)


@cli.command()
def debug():
    """Start an interactive console"""
    local = {**globals(), 'settings': SETTINGS}
    code.interact(local=local)


@cli.command()
@click.argument("files", nargs=-1, required=True)
def bless(files):
    """'Bless' files; "bless" means to put a file on the system somewhere
    under the control of 'setup', i.e. in the repository."""
    def get_from_to(file):
        source = Path(ORIGINAL_CWD, file)
        destination = home() / source.relative_to(Path.home())
        return [source, destination]

    source_cmd = ['symgr', *debug_if_debug(), '--bless']
    commands = tuple(source_cmd + get_from_to(file) for file in files)
    run_commands(commands)


def root():
    """Return the path of the root of this setup repository."""
    # this file is under HOME_DIR. HOME_DIR's parent is the root.
    # So search backwards for HOME_DIR and get its parent.
    path = Path(__file__).resolve()  # resolve symlinks (~/bin=setup/HOME/bin)
    return path.parents[path.parts[::-1].index(HOME_DIR)]


def home():
    return root() / HOME_DIR


def is_debug():
    return logging.getLogger().level == logging.DEBUG


def debug_if_debug(flag='--debug'):
    return [flag] if is_debug() else []


def install(name, settings):
    log.info(f"Setting up: {name}")
    ex = lambda s: exec(textwrap.dedent(s))
    funcs = {'exec': ex, 'cmd': run_commands}
    for key, func in funcs.items():
        if item := settings.get(key):
            log.debug(f"{key}: {item}")
            func(item)


if __name__ == '__main__':
    # manipulate cwd and load settings
    ORIGINAL_CWD = os.getcwd()
    os.chdir(root())  # set the cwd to the root of the repository
    SETTINGS = eval(open(SETTINGS_PATH).read())

    # dynamically add options to the cli
    for name, settings in SETTINGS.items():
        func = functools.partial(install, name, settings)
        func.__doc__ = settings.get('help', f"Setup {name}")
        cli.command(name)(func)

    cli()  # pylint: disable=no-value-for-parameter
