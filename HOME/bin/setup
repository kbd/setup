#!/usr/bin/env python3
import logging
import os
from functools import partial
from pathlib import Path
from textwrap import dedent

import click

from lib.utils import run_commands

log = logging.getLogger()

# called as ~/bin/setup -> points to ~/setup/HOME/bin/setup -> repo root ~/setup
ROOT = Path(__file__).resolve().parents[2]
HOME = ROOT / 'HOME'
BIN = HOME/ 'bin'
CONF = ROOT / 'conf'
VENDOR = ROOT / '3rdparty'
SETTINGS_PATH = CONF / 'settings.py'
ORIGINAL_CWD = Path(os.getcwd())
FUNCS = {'cmd': run_commands, 'exec': lambda s: exec(dedent(s))}

@click.group(chain=True)
@click.option("-d", "--debug", is_flag=True, help="Enable debug logging")
def cli(debug):
    # set up logging
    loglevel = logging.DEBUG if debug else logging.INFO
    logging.basicConfig(level=loglevel)
    logging.getLogger('requests').setLevel(logging.WARNING)


@cli.command()
@click.argument("files", nargs=-1, required=True)
def bless(files):
    """'Bless' files; "bless" means to put a file on the system somewhere
    under the control of 'setup', i.e. in the repository."""
    def from_to(file):
        src = ORIGINAL_CWD / file
        dest = HOME / src.relative_to(Path.home())
        return [src, dest]

    source_cmd = ['symgr', *debug_if_debug(), '--bless']
    commands = tuple(source_cmd + from_to(f) for f in files)
    run_commands(commands)


def is_debug():
    return log.level == logging.DEBUG


def debug_if_debug(flag='--debug'):
    return [flag] if is_debug() else []


def install(name, settings):
    log.info(f"Setting up: {name}")
    for key in set(FUNCS) & set(settings):
        log.debug(f"{key}: {settings[key]}")
        FUNCS[key](settings[key])


if __name__ == '__main__':
    # manipulate cwd and load settings
    os.chdir(CONF)
    SETTINGS = eval(open(SETTINGS_PATH).read())

    # dynamically add options to the cli
    for name, settings in SETTINGS.items():
        if not isinstance(settings, dict):  # default option is 'cmd'
            settings = {'cmd': settings}

        func = partial(install, name, settings)
        func.__doc__ = settings.get('help', f"Setup {name}")
        cli.command(name)(func)

    for d in 'ROOT', 'HOME', 'CONF', 'BIN', 'VENDOR':
        func = lambda d=d: print(globals()[d])
        func.__doc__ = f"Print the path to the setup {d} dir"
        cli.command(d.lower())(func)

    cli()  # pylint: disable=no-value-for-parameter
