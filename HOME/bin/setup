#!/usr/bin/env python3
import argparse
import code
import logging
import os
import subprocess
import sys
from functools import partial
from pathlib import Path

from lib import setup
from lib.mac import restart_os_functions
from lib.setup.packages import install_packages, mac


log = logging.getLogger()


def create_command_line_parser(settings):
    """Create and return the command line parser."""
    parser = argparse.ArgumentParser()
    parser.add_argument('-d', '--debug', action='store_true', help='enable debug logging')
    parser.add_argument('--root', action='store_true', help='Print setup root path and exit')

    subparsers = parser.add_subparsers(dest='action')
    for action in [status, pull, push, symlinks, debug, edit, restart_os_funcs]:
        subparsers.add_parser(action.__name__, help=action.__doc__) \
            .set_defaults(func=action)

    # packages
    subparser = subparsers.add_parser('packages', help="Install/update packages")
    subparser.add_argument(
        'filter', help="Only install/update packages matching regex", nargs='?'
    )
    subparser.set_defaults(func=install_packages)

    # export every "setup packages foo" as "setup foo"
    for name in settings['packages']:
        subparser = subparsers.add_parser(name, help=f"Install/update {name} packages")
        subparser.set_defaults(func=partial(install_packages, filter=f'^{name}$'))

    return parser


def repo(*args):
    cmd = ['git'] + [*args]
    log.debug(f"Running: {cmd}")
    subprocess.check_call(cmd)


def status(settings, args):
    """Get repository status"""
    repo('status')


def pull(settings, args):
    """Pull repository from server"""
    repo('pull')


def push(settings, args):
    """Push repository to server"""
    repo('push')


def symlinks(settings, args):
    """Create symlinks from $HOME to setup/HOME"""
    cmd = ['symgr', Path.home(), setup.home()]
    if args.debug:
        cmd += ['--debug']
    log.debug(f"Running: {cmd}")
    subprocess.run(cmd, check=True)


def debug(settings, args):
    """Start an interactive console"""
    local = {**globals(), 'settings': settings, 'args': args}
    code.interact(local=local)


def edit(settings, args):
    """Open the setup directory in your editor"""
    subprocess.call('$EDITOR .', shell=True)  # works because cwd is set


def restart_os_funcs(settings, args):
    """Restart Finder, Menubar, Dock, etc."""
    restart_os_functions()


def main():
    repo_root_dir = setup.root()
    os.chdir(repo_root_dir)  # set the cwd to the root of the repository

    # get settings, set up command line parser and parse command line args
    settings = setup.load_config()
    parser = create_command_line_parser(settings)
    args = parser.parse_args()

    if args.root:
        print(repo_root_dir)
        return 0

    # set up logging
    loglevel = logging.DEBUG if args.debug else logging.INFO
    logging.basicConfig(level=loglevel)
    logging.getLogger('requests').setLevel(logging.WARNING)

    log.debug(f"Set cwd to {repo_root_dir!r}")
    log.debug(f"Command line arguments were: {args!r}")

    # actually do stuff
    if hasattr(args, 'func'):
        args.func(settings, args)
    else:
        parser.print_help()


if __name__ == '__main__':
    sys.exit(main())
