#!/usr/bin/env python3
import argparse
import code
import logging
import os
import subprocess
import sys
from functools import partial
from pathlib import Path

from lib import symlink, setup
from lib.mac import restart_os_functions
from lib.setup.packages import install_packages, mac

log = logging.getLogger()


def create_command_line_parser(settings):
    """Create and return the command line parser."""
    parser = argparse.ArgumentParser()
    parser.add_argument('-d', '--debug', action='store_true', help='enable debug logging')
    parser.add_argument('--root', action='store_true', help='Print setup root path and exit')

    subparsers = parser.add_subparsers(dest='action')

    # status
    subparser = subparsers.add_parser('status', help="Get repository status")
    subparser.set_defaults(func=repo, cmd=['status'])

    # pull
    subparser = subparsers.add_parser(
        'pull', help="Pull repository from server", aliases=['update']
    )
    subparser.set_defaults(func=repo, cmd=['pull'])

    # push
    subparser = subparsers.add_parser('push', help="Push repository to server")
    subparser.set_defaults(func=repo, cmd=['push'])

    # packages
    subparser = subparsers.add_parser(
        'packages', help="Install/update packages"
    )
    subparser.add_argument(
        'filter', help="Only install/update packages matching regex", nargs='?'
    )
    subparser.set_defaults(func=install_packages)

    # export every "setup packages foo" as "setup foo"
    for name in settings['packages']:
        subparser = subparsers.add_parser(name, help=f"Install/update packages for {name}")
        subparser.set_defaults(func=partial(install_packages, filter=f'^{name}$'))

    # debug: load the setup program as a module and start an interactive console
    subparser = subparsers.add_parser('debug', help="Start an interactive console")
    subparser.set_defaults(func=debug)

    # edit: open the setup directory in your editor
    subparser = subparsers.add_parser('edit', help="Open the setup directory in your editor")
    subparser.set_defaults(func=edit)

    # https://blog.cloudtroopers.com/how-restart-mac-os-x-finder-dock-or-menubar
    # this should be run if any settings change, but you don't necessarily
    # need to run this every time 'update_os_settings' is run
    subparser = subparsers.add_parser(
        'restart_os_functions', help="Restart Finder, Menubar, Dock, etc."
    )
    subparser.set_defaults(func=restart_os_functions)

    return parser


def repo(settings, *args, **kwargs):
    cmd = ['git'] + kwargs['cmd']
    log.debug(f"cmd is {cmd!r} and kwargs is: {kwargs!r}")
    cmd = [c.format(**kwargs) for c in cmd]
    subprocess.check_call(cmd)


def debug(settings, *args, **kwargs):
    code.interact(local={'settings': settings, **globals()})


def edit(*args, **kwargs):
    subprocess.call('$EDITOR .', shell=True)  # works because cwd is set


def main():
    repo_root_dir = setup.root()
    repo_home_dir = setup.home()
    os.chdir(repo_root_dir)  # set the cwd to the root of the repository
    home_dir = Path.home()

    # get settings, set up command line parser and parse command line args
    settings = setup.load_config()
    parser = create_command_line_parser(settings)
    args = parser.parse_args()

    if args.root:
        print(repo_root_dir)
        return 0

    # set up logging
    loglevel = logging.DEBUG if args.debug else logging.INFO
    logging.basicConfig(level=loglevel)

    # set requests loglevel
    logging.getLogger('requests').setLevel(logging.WARNING)

    log.debug(f"Set cwd to {repo_root_dir!r}")
    log.debug(f"Command line arguments were: {args!r}")

    # actually do stuff
    if hasattr(args, 'func'):
        args.func(settings, **vars(args))
    else:
        symlink.link_directories(repo_home_dir, home_dir)
        mac(settings['packages']['mac'])
        restart_os_functions()


if __name__ == '__main__':
    sys.exit(main())
