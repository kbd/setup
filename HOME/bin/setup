#!/usr/local/bin/python3
# ^ intentionally use system Python vs /usr/bin/env
import code
import functools
import logging
import os
import subprocess
from contextlib import contextmanager
from pathlib import Path

import click

from lib import setup
from lib.utils import run_commands

log = logging.getLogger()

@click.group(chain=True)
@click.option("-d", "--debug", is_flag=True, help="Enable debug logging")
def cli(debug):
    # set up logging
    loglevel = logging.DEBUG if debug else logging.INFO
    logging.basicConfig(level=loglevel)
    logging.getLogger('requests').setLevel(logging.WARNING)


@cli.command()
def debug():
    """Start an interactive console"""
    local = {**globals(), 'settings': SETTINGS}
    code.interact(local=local)


@cli.command()
def symlinks():
    cmd = ['symgr', setup.home(), Path.home()]
    if setup.is_debug():
        cmd.insert(1, '--debug')
    log.info(f"Running: {cmd}")
    subprocess.run(cmd, check=True)


@contextmanager
def chdir(dir: Path):
    original = os.getcwd()
    os.chdir(dir)
    try:
        yield
    finally:
        os.chdir(original)


@cli.command()
@click.argument("files", nargs=-1, required=True)
def bless(files):
    """'Bless' files; "bless" means to put a file on the system somewhere
    under the control of 'setup', i.e. in the repository."""
    source_cmd = ['symgr', '--bless']
    if log.level == logging.DEBUG:
        source_cmd += ['--debug']

    for file in files:
        # take the passed-in file, relative to $HOME, and figure out where it
        # goes relative to setup.home(). Note: can't link if not in $HOME
        with chdir(ORIGINAL_CWD):
            path = Path(file).resolve()
        destination = setup.home() / path.relative_to(Path.home())
        log.info(f"Blessing {path} to {destination}")
        cmd = source_cmd + [path, destination]
        log.info(f"Running: {cmd}")
        subprocess.run(cmd, check=True)


def install(name, settings):
    log.info(f"Setting up: {name}")
    if code := settings.get('exec'):
        log.debug(f"Executing: {code}")
        exec(code)

    if cmd := settings.get('cmd'):
        log.debug(f"Running: {cmd}")
        run_commands(cmd)


if __name__ == '__main__':
    # manipulate cwd and load settings
    ORIGINAL_CWD = os.getcwd()
    os.chdir(setup.root())  # set the cwd to the root of the repository
    SETTINGS = setup.load_config()

    # dynamically add options to the cli
    for name, settings in SETTINGS.items():
        func = functools.partial(install, name, settings)
        func.__doc__ = settings.get('help', f"Setup {name}")
        cli.command(name)(func)

    cli()  # pylint: disable=no-value-for-parameter
