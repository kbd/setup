#!/usr/local/bin/python3
# ^ intentionally use system Python vs /usr/bin/env
import argparse
import os
import shutil
import subprocess
import urllib.parse
from pathlib import Path

import tabulate
import toml

from lib.colors import fg, s
from lib.utils import run, run_commands


def _format_manual_packages_table(packages, bin_dir):
    items = [
        [
            f"{fg.yellow}{key}{s.reset}",
            params.get('git', params.get('url', params.get('cmd'))), # source
            f'{fg.green}yes{s.reset}' if (bin_dir/key).exists() else f'{fg.red}no{s.reset}'
        ]
        for key, params in packages.items()
    ]
    headers = [f"{fg.blue}{s.bold}{k}{s.reset}" for k in ["key","source","installed"]]
    table = tabulate.tabulate(items, headers=headers, tablefmt="plain")
    return table


def _get_manual_packages_to_install(packages, bin_dir):
    if not Path(bin_dir, 'symgr').exists():
        # special-case symgr, since everything else depends on it.
        # if not installed, we're bootstrapping, so install everything.
        return packages.keys()

    cmd = ["fzf", "--multi", "--ansi", "--header-lines=1"]
    table = _format_manual_packages_table(packages, bin_dir)
    result = run(cmd, input=table, stdout=subprocess.PIPE, check=False)
    if result.returncode == 130:  # quit fzf, take no action
        return []

    keys = [line.decode().split()[0] for line in result.stdout.splitlines()]
    return keys


def manual(packages, packages_dir, bin_dir):
    """Set up software that is more manual.

    For example, software that isn't configured with a package manager like
    Homebrew, where an archive needs to be downloaded and unpacked, or a repo
    needs to be checked out from git and a program manually built.

    example setting from settings.py:
    'manual': ['install-manual', 'manual.toml', VENDOR],
    dir =
    """
    # print(packages, dir, bin_dir)
    # return
    keys = _get_manual_packages_to_install(packages, bin_dir)
    if not keys:
        return

    print(f"Installing packages: {', '.join(keys)}")
    for key in keys:
        print(f"Installing: {key}")
        params = packages[key]
        git = params.get('git')  # url of git repository to clone
        tag = params.get('tag')  # tag of git repo to get
        url = params.get('url')  # url of file to download
        cmd = params.get('cmd')  # commands to run after cloning
        bin = params.get('bin')  # path to the executable to install in ~/bin
        dmg = params.get('dmg')  # if url is dmg, path of app inside dmg
        exe = params.get('exe')  # shell executable argument to run(exe=...)

        # remove if exists
        package_dir = Path(packages_dir, key)
        assert Path.home() in package_dir.parents, f"path ({package_dir}) must be under $HOME"
        if package_dir.exists():
            print(f"Deleting existing directory: {package_dir}")
            shutil.rmtree(package_dir)

        # get something and create the destination directory
        if any([git, url]):
            c = None  # suppress Pylance "c is possibly unbound" errors
            if git:
                print(f"Cloning {git} to {package_dir}")
                c = ['git', 'clone', '--depth', '1', '--recurse-submodules']
                if tag:
                    c += ['--branch', tag]
                c += [git, package_dir]
            if url:
                print(f"Downloading {url} to {package_dir}")
                c = ['aria2c', '-d', package_dir, url]

            print(f"Running {c}")
            run(c)
        else:
            # you didn't download it, i.e. it's part of your repository
            # so set package dir to your ~/bin dir so that anything generated
            # winds up there >:D
            package_dir = bin_dir

        # run any build/extract commands
        if cmd:
            print(f"Running {cmd}", f" ({exe})" if exe else '')
            run_commands(cmd, cwd=package_dir, exe=exe)

        # symlink any binaries specified to bin_dir
        if bin:
            # accept either a string or a sequence of strings
            binaries = [bin] if isinstance(bin, str) else bin
            print(f"Linking binaries: {', '.join(binaries)}")
            for b in binaries:
                cmd = ['symgr', '-I', Path(dir, key, b), bin_dir]
                print(f"Running {cmd}")
                run(cmd)

        # mount the dmg specified in 'url' and copy the app out of it
        if dmg:
            filename = os.path.basename(urllib.parse.urlparse(url).path)
            run_commands((
                ['hdiutil', 'attach', '-nobrowse', filename],
                ['cp', '-r', dmg, bin_dir],
                ['hdiutil', 'detach', os.path.dirname(dmg)],
            ), cwd=package_dir)


if __name__ == '__main__':
    parser = argparse.ArgumentParser(description="Install manually-installed software")
    parser.add_argument("config_path", help="Path to config file")
    parser.add_argument("dir", help="Directory to install software to")
    parser.add_argument("bin_dir", default=Path('~/bin').expanduser(), nargs='?',
        help=f"Bin path to symlink to (default: ~/bin)")
    args = parser.parse_args()

    packages = toml.load(args.config_path)
    manual(packages, args.dir, args.bin_dir)
