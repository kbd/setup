#!/usr/bin/env python3
"""Join a list of strings into one string.

So often, I have a list of strings intended for subprocess.run that I need to
try to execute directly on the shell, and I have to manually take out all the
commas and quote characters first.

cmd = ['echo', 'hello', 'world']
subprocess.run(cmd)

Here's how this program should work:

$ echo "['echo', 'hello', 'world']" | cmdstr
echo hello world

"""
import argparse
import shlex
from pathlib import *
from subprocess import run
from sys import stderr, stdin

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Convert a command from a source language to shell, or vice versa")
    parser.add_argument('operation', choices=('s','p'), help='Convert from shell or python', default='p', nargs='?')
    parser.add_argument('-c', '--clipboard', action='store_true', help="Take from and output to the clipboard")
    args = parser.parse_args()

    if args.clipboard:
        cmd = run(['cb'], capture_output='True', check=True).stdout.decode()
    else:
        cmd = stdin.read()

    print(cmd, file=stderr)
    if args.operation == 's': # shell -> python
        print("Converting to Python:", file=stderr)
        result = repr(shlex.split(cmd))
    else: # normal: python to shell
        print("Converting to shell:", file=stderr)
        result = ' '.join(map(shlex.quote, map(str, eval(cmd))))

    print(result, end='')
    if args.clipboard:
        run(['cb'], input=result.encode(), check=True)
