#!/usr/bin/env nu
def find-tests [] {(
  rg '^func\s+(Test[A-Z0-9]\w*)'
    -or '$1'
    --no-heading
    --with-filename
    --no-line-number
    --sort=path
    --color=always
)}

def select-test [] {
  # searches codebase for tests and lets user fuzzy find them
  # returns [{path:, name:}, ...] for selected tests
  find-tests | fzf --ansi | lines | split column : path name
}

def verbose [v flag] {
  if $v { append $flag } else { flatten }
}

def go-test-cmd [testpath funcname --verbose(-v)] {
  let parentdir = ($testpath | path parse).parent
  let args = [test $"'./($parentdir)'" -run $"'^($funcname)$'"]
  [go ($args | verbose $verbose '-v')]
}

def dlv-debug-cmd [testpath funcname --verbose(-v)] {
  let parentdir = ($testpath | path parse).parent
  # todo: use temp file for delve-init so that this script is self-contained
  let args = [test $"'./($parentdir)'" --init ~/setup/snip/delve-init -- -test.run $"'^($funcname)$'"]
  [dlv ($args | verbose $verbose '-test.v')]
}

def run [cmd] {
  # cmd is a list of [command, args]
  $cmd | flatten | str join ' ' # show command
  run-external $cmd.0 $cmd.1
}

def main [
  --debug (-d)
  --print (-p)
  --all (-a)
  --verbose (-v)
] {
  if $all {
    if $debug {
      run [dlv [test]] # I don't see an equivalent to run all tests in dlv
    } else {
      run [go ([test './...'] | verbose $verbose '-v')]
    }
  } else {
    let test = select-test
    if ($test | length) == 0 {
      exit 0 # no test selected
    }
    if $debug {
      run (dlv-debug-cmd $test.path.0 $test.name.0 --verbose)
    } else {
      run (go-test-cmd $test.path.0 $test.name.0 --verbose)
    }
  }
}
